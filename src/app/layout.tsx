import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ReduxProvider } from '@/lib/redux/provider';
import { config } from '@/config';
import QueryProviders from "@/lib/hooks/ReactQueryProvider";
import LocalStorageProvider from "@/lib/redux/LocalStorageContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: config.app.name,
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              (function() {
                try {
                  // Skip theme handling during SSR
                  if (typeof window === 'undefined') return;
                  
                  // Check localStorage first
                  const storedTheme = localStorage.getItem('theme');
                  
                  if (storedTheme) {
                    // Apply stored theme immediately
                    if (storedTheme === 'dark') {
                      document.documentElement.classList.add('dark');
                      document.documentElement.style.setProperty('--background-color', '#121212');
                      document.documentElement.style.setProperty('--text-color', '#ffffff');
                    } else {
                      document.documentElement.classList.remove('dark');
                      document.documentElement.style.setProperty('--background-color', '#ffffff');
                      document.documentElement.style.setProperty('--text-color', '#121212');
                    }
                  } else {
                    // If no stored theme, check system preference
                    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                    if (prefersDark) {
                      document.documentElement.classList.add('dark');
                      document.documentElement.style.setProperty('--background-color', '#121212');
                      document.documentElement.style.setProperty('--text-color', '#ffffff');
                    }
                  }
                } catch (e) {
                  // Fail silently if there's an error
                  console.error('Theme initialization error:', e);
                }
              })();
            `
          }}
        />
      </head>
      <body suppressHydrationWarning className={`${geistSans.variable} ${geistMono.variable} antialiased h-screen min-h-screen min-w-screen`}
      >
        <main className="w-screen h-screen bg-gray-200">
          <ReduxProvider>
            <QueryProviders>
              <LocalStorageProvider>
                {children}
              </LocalStorageProvider>
            </QueryProviders>
          </ReduxProvider>
        </main>
      </body>
    </html>
  );
}
